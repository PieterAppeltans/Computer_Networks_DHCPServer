import java.net.InetAddress;
import java.time.LocalDateTime;
import java.util.*;


public class DHCPServer {
	public DHCPServer(String string){
		
	}
	private byte[] start;
	private byte[] end;
	private byte[] mask;
	private int defaultLeaseTime;
	private int maxLeaseTime;
	private int minLeaseTime;
	private Map<InetAddress,Object[]> leasedIP = new Hashtable<InetAddress, Object[]>();
	/**
	 * A method that generate a new InetAddress based on the client identifier
	 * @param clientIdentifier Unique client identifier, used to try to give the same client the same InetAddress if available
	 * @return
	 */
	private InetAddress generateNewInetAddress (byte[] clientIdentifier){
		return null;
	}
	/**
	 * 
	 * @return
	 */
	private boolean inRange(InetAddress ipaddr){
		return false;
	}
	private boolean inUse(InetAddress ipaddr){
		return false;
	}
	/**
	 * Adding a new lease to the map leasedIP
	 * @param ipaddress The address which is leased
	 * @param clientIdentifier A unique client identifier
	 * @param endOfLease Time at which lease expires
	 */
	private void addNewLease(InetAddress ipaddress, byte[] clientIdentifier,int endOfLease){
		if (ipaddress == null){
			ipaddress = generateNewInetAddress(clientIdentifier);
		}
		else if (!(inRange(ipaddress) && !inUse(ipaddress))){
			ipaddress = generateNewInetAddress(clientIdentifier);
		}
		if (endOfLease == 0){
			endOfLease = defaultLeaseTime;
		}
		else if (endOfLease < minLeaseTime){
			endOfLease =minLeaseTime;
		}
		else if (endOfLease > maxLeaseTime){
			endOfLease = maxLeaseTime;
		}
		leasedIP.put(ipaddress,new Object[]{clientIdentifier,LocalDateTime.now().plusSeconds((long)endOfLease)});
	}
	private void removeLease(InetAddress toBeRemoved){
		leasedIP.remove(toBeRemoved);
	}
	/**
	 * Method that remove every expired lease (id LocalDateTime.now() > endOfLease) in the map leasedIP. 
	 */
	private void removeExpiredLeases(){
		// TODO check if all keys are checked
		for (InetAddress key : leasedIP.keySet()) {
			LocalDateTime endOfLease = (LocalDateTime) leasedIP.get(key)[1];
			if (endOfLease.isBefore(LocalDateTime.now())){
				removeLease(key);
			}
		}
	}
	/**
	 * Returning a DHCPOffer given the received DHCPDiscoverMessage.
	 * @param message the received DHCPDiscoverMessage that is used to make the offer
	 * @return
	 */
	private DHCPOffer processDiscover(DHCPMessage message){
		return null;
	}
	/**
	 * 
	 * @param message
	 * @return
	 */
	private DHCPAck processRequest(DHCPMessage message){
		return null;
	}
	private void processRelease(DHCPMessage message){}
	/**
	 * 
	 * @return
	 */
	public DHCPMessage answerMessage(byte[] receivedMessage){
		removeExpiredLeases();
		DHCPMessage parsedMessage = MessageParser.parseMessage(receivedMessage, 312);
		Map<DHCPOptions, byte[]> parsedOptions = parsedMessage.getOptionsMap();
		byte[] messageType = parsedOptions.get(DHCPOptions.DHCPMESSAGETYPE);
		if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPDISCOVER ){
			return processDiscover(parsedMessage);
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPREQUEST ){
			return processRequest(parsedMessage);
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPRELEASE ){
			processRelease(parsedMessage);
			return null;
		}
		else{
			return null;
		}
	}
}
