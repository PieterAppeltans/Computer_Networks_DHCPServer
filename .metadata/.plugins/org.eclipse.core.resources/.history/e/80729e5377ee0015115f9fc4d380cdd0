import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Map;

public class DHCPServerThread implements Runnable {

	private DatagramSocket serverSocket;
    private DatagramPacket receivePacket;
    private IPAddressKeeper addressKeeper;
    private byte[] serverAddress;
    
    /**
     * Constructor for a single DHCP server thread.
     * 
     * @param 	socket
     * 				The DatagramSocket used to send a response.	
     * @param 	packet
     * 				The received DatagramPacket.
     * @param 	addresskeeper
     * 				The associated IPAddressKeeper with the DHCP server.	
     * @param 	serverAddress
     * 				The address of the DHCP server.
     */
    public DHCPServerThread(DatagramSocket socket, DatagramPacket packet,IPAddressKeeper addresskeeper,byte[] serverAddress) {
        this.serverSocket = socket;
        this.receivePacket = packet;
        this.addressKeeper = addresskeeper;
        this.serverAddress = serverAddress;
    }

    /**
     * Run a single DHCP server thread.
     */
    public void run() {
    	System.out.println(Thread.currentThread().getName() + " started");
    	InetAddress IPAddress = receivePacket.getAddress(); 
		int port = receivePacket.getPort();
		DHCPMessage sendMessage = this.answerMessage(receivePacket.getData());
		if (sendMessage != null){
			sendMessage.print(false);
			byte[] sendData = sendMessage.generateMessage();
			DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
			try {
				serverSocket.send(sendPacket);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}	
    }
    
    /**
	 * Returns a DHCPOffer message as a response to the received DHCPDiscover message providing an offered IP, the server address and a lease time.
	 * 
	 * @param 	message
	 * 				The received DHCPDiscover message.
	 * @return	A DHCPOffer message as a response to the received DHCPDiscover message.
	 */
	private DHCPOffer processDiscover(DHCPMessage message) {
		Map<DHCPOption,byte[]>options = message.getOptionsMap();
		byte[] IP = options.get(DHCPOption.REQUESTEDIPADDRESS);
		byte[] t = options.get(DHCPOption.IPADDRESSLEASETIME);
		long leaseTime;
		if ((IP == null) || !(addressKeeper.inRange(IP) && !addressKeeper.inUse(IP)) ){
			IP = addressKeeper.generateNewInetAddress(message.getChaddr()).getAddress();
		}
		if (t == null){
			leaseTime = addressKeeper.getDefaultLeaseTime();
		}
		else{
			ByteBuffer buf = ByteBuffer.wrap(t);
			leaseTime = toUnsigned(buf.getInt());
			if (leaseTime < addressKeeper.getMinLeaseTime()){
				leaseTime = addressKeeper.getMinLeaseTime();
			}
			else if (leaseTime > addressKeeper.getMaxLeaseTime()){
				leaseTime = addressKeeper.getMaxLeaseTime();
			}
		}
		addressKeeper.addNewOffer(IP, message.getChaddr());
		return new DHCPOffer(message.getXid(), IP, this.serverAddress,message.getChaddr() , DHCPOffer.getDefaultOptions((int)leaseTime, this.serverAddress));
	}
	
	/**
	 * Returns a DHCPAck message as a response to the received DHCPRequest message providing the client's IP, the server address and a lease time
	 * or a DHCPNak message if the request is not acknowledged by the server.
	 * 
	 * @param 	message
	 * 				The received DHCPRequest message.
	 * @return	A DHCPAck or DHCPNak message as a response to the received DHCPRequest message.
	 */
	private DHCPAck processRequest(DHCPMessage message){
		Map<DHCPOption,byte[]>options = message.getOptionsMap();
		byte[] IP = options.get(DHCPOption.REQUESTEDIPADDRESS);
		byte[] t = options.get(DHCPOption.IPADDRESSLEASETIME);
		byte[] serverIdentifier = options.get(DHCPOption.SERVERIDENTIFIER);
		long leaseTime;
		if (t == null){
			leaseTime = addressKeeper.getDefaultLeaseTime();
		}
		else{
			ByteBuffer buf = ByteBuffer.wrap(t);
			leaseTime = toUnsigned(buf.getInt());
			if (leaseTime < addressKeeper.getMinLeaseTime()){
				leaseTime = addressKeeper.getMinLeaseTime();
			}
			else if (leaseTime > addressKeeper.getMaxLeaseTime()){
				leaseTime = addressKeeper.getMaxLeaseTime();
			}
		}
		// If the user has selected another DHCPServer
		if (!Arrays.equals(serverIdentifier,this.serverAddress) && serverIdentifier != null){
			System.out.println("selected other DHCPServer: " + DHCPMessage.printByteArrayInt(serverIdentifier));
			System.out.println("server on: " + DHCPMessage.printByteArrayInt(this.serverAddress));
			addressKeeper.removeOfferByClientIdentifier(message.getChaddr());
			return null;
		}
		//If the user select this DHCPServer the lease must be added
		// If successfull return ACK else NAK
		else if (Arrays.equals(serverIdentifier,this.serverAddress) && IP != null && serverIdentifier != null){
			if (!addressKeeper.inUse(IP)){ // should still get an IP even when the requested one is in use or none is requested?
				addressKeeper.addNewLease(IP,message.getChaddr(),(int)leaseTime );
				DHCPAck returnMessage = new DHCPAck(message.getXid(), message.getCiaddr(), IP, this.serverAddress, message.getChaddr(), DHCPAck.getDefaultOptions((int)leaseTime,this.serverAddress,true));
				return returnMessage;
			} else {
				System.out.println("IP in use");
			}
		}
		/*
		 * DHCPREQUEST generated during RENEWING state:

      'server identifier' MUST NOT be filled in, 'requested IP address'
      option MUST NOT be filled in, 'ciaddr' MUST be filled in with
      client's IP address. In this situation, the client is completely
      configured, and is trying to extend its lease. This message will
      be unicast, so no relay agents will be involved in its
      transmission.  Because 'giaddr' is therefore not filled in, the
      DHCP server will trust the value in 'ciaddr', and use it when
      replying to the client.
		 */
		else if (serverIdentifier == null && IP == null && message.getCiaddr() != null){
			IP = message.getCiaddr(); // RENEW,REBOUND
			addressKeeper.updateLease(IP,(int)leaseTime );
			DHCPAck returnMessage = new DHCPAck(message.getXid(),message.getCiaddr(), IP, this.serverAddress, message.getChaddr(), DHCPAck.getDefaultOptions((int)leaseTime,this.serverAddress,true));
			return returnMessage;
		}
		System.out.println("other");
		return null;
	}
	
	/**
	 * Prcoesses a received DHCPRelease message by removing the client's lease on the serverside.
	 * 
	 * @param	message
	 * 				The received DHCPRelease message.
	 */
	private void processRelease(DHCPMessage message){
		// check if client has IP and then release it.
		if (addressKeeper.hasIP(message.getChaddr(), message.getCiaddr())){
			addressKeeper.removeLease(message.getCiaddr());
		}
	}
	
	/**
	 * Generate the appropriate answer to the received DHCP message.
	 * 
	 * @param 	receivedMessage
	 * 				The received DHCP message.
	 * @return	A DHCP answer message to the received message.
	 */
	public DHCPMessage answerMessage(byte[] receivedMessage){
		addressKeeper.removeExpiredLeases();
		addressKeeper.removeExpiredOffers();
		addressKeeper.printLeasedIP();
		addressKeeper.printOfferedIP();
		DHCPMessage parsedMessage = MessageParser.parseMessage(receivedMessage, 312);
		parsedMessage.print(true);
		Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
		byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
		if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPDISCOVER ){
			return processDiscover(parsedMessage);
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPREQUEST ){
			return processRequest(parsedMessage);
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPRELEASE ){
			processRelease(parsedMessage);
			return null;
		}
		else{
			return null;
		}
	}
	
	/**
	 * Method that converts a signed int to an unsigned long (e.g. -1 = 0xffffffff => 2**32-1).
	 * 
	 * @param 	signed
	 * 				The signed integer to be converted.
	 * @return 	The unsigned long from which the 4 least significant bytes equal the 4 bytes of the signed int. 
	 */
	private long toUnsigned(int signed){
		return (long)(signed) &0x00000000ffffffffL;
	}
	
}