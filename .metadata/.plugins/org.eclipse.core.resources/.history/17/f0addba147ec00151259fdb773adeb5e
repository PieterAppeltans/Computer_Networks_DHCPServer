import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.util.Map;

public class DHCPServerThread implements Runnable {

	private DatagramSocket serverSocket = null;
    private DatagramPacket receivePacket = null;
    private AdressKeeper server;
    public DHCPServerThread(DatagramSocket socket, DatagramPacket packet,AdressKeeper server) {
        this.serverSocket = socket;
        this.receivePacket = packet;
        this.server = server;
    }

    public void run() {
    	System.out.println(Thread.currentThread().getName() + " started");
    	InetAddress IPAddress = receivePacket.getAddress(); 
		int port = receivePacket.getPort();
		byte[] sendData = AdressKeeper;
		DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
		try {
			serverSocket.send(sendPacket);
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    /**
	 * Returning a DHCPOffer given the received DHCPDiscoverMessage.
	 * @param message the received DHCPDiscoverMessage that is used to make the offer
	 * @return
	 */
	private DHCPOffer processDiscover(DHCPMessage message){
		Map<DHCPOption,byte[]>options = message.getOptionsMap();
		byte[] IP = options.get(DHCPOption.REQUESTEDIPADDRESS);
		byte[] t = options.get(DHCPOption.IPADDRESSLEASETIME);
		ByteBuffer buf = ByteBuffer.wrap(t);
		int leaseTime = buf.getInt();
		if ((IP == null) || !(inRange(IP) && !inUse(IP)) ){
			IP = generateNewInetAddress(message.getChaddr()).getAddress();
		}
		if (leaseTime == 0){
			leaseTime = defaultLeaseTime;
		}
		else if (leaseTime < minLeaseTime){
			leaseTime =minLeaseTime;
		}
		else if (leaseTime > maxLeaseTime){
			leaseTime = maxLeaseTime;
		}
		return new DHCPOffer(message.getXid(), IP, this.serverIP,message.getChaddr() , DHCPOffer.getDefaultOptions(leaseTime, this.serverIP));
	}
	/**
	 * 
	 * @param message
	 * @return
	 */
	private DHCPAck processRequest(DHCPMessage message){
		return null;
	}
	private void processRelease(DHCPMessage message){}
	/**
	 * 
	 * @return
	 */
	public DHCPMessage answerMessage(byte[] receivedMessage){
		removeExpiredLeases();
		DHCPMessage parsedMessage = MessageParser.parseMessage(receivedMessage, 312);
		Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
		byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
		if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPDISCOVER ){
			return processDiscover(parsedMessage);
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPREQUEST ){
			return processRequest(parsedMessage);
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPRELEASE ){
			processRelease(parsedMessage);
			return null;
		}
		else{
			return null;
		}
	}
}