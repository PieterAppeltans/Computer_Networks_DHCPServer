import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.Map;
/**
 * DHCPAck is send by the DHCPServer in response of a client DHCPRequest.
 * Please note that it's possible to create both ACK (positive response) as NAK (negative response).
 * @author Pieter Appeltans & Hans Cauwenbergh
 */
public class DHCPAck extends DHCPMessage {
	/**
	 * Constructor for a new DHCPAck message
	 * @param xid
	 * @param ciaddr
	 * @param yiaddr
	 * @param siaddr
	 * @param chaddr
	 * @param options
	 */
	public DHCPAck(int xid, byte[] ciaddr, byte[] yiaddr, byte[] siaddr, byte[] chaddr, Map<DHCPOption,byte[]> options) {
		super(DHCPOpcode.BOOTREPLY, // opcode
			  DHCPHtype.ETHERNET, // htype
			  xid, // xid
			  (short) 0, // secs
			  false, // flag
			  ciaddr,
			  yiaddr,
			  siaddr,
			  new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }, // giaddr
			  chaddr,
			  options
			  );
		this.options = options;
	}
	
	private Map<DHCPOption,byte[]> options;
	
	public static Map<DHCPOption,byte[]> getDefaultOptions(){
		return DHCPAck.getDefaultOptions(86400, // 86400s (1 day)
					   	  new byte[]{ (byte) 0xC0, (byte) 0xA8, (byte) 0x01, (byte) 0x01 }, // 192.168.1.1 DHCP server
					   	  true);
	}
	
	public static Map<DHCPOption,byte[]> getDefaultOptions(int leaseTime, byte[] serverIp, boolean acknowledged){
		byte[] t = ByteBuffer.allocate(4).putInt(leaseTime).array();
		Map<DHCPOption,byte[]> options = new HashMap<DHCPOption,byte[]>();
		if (acknowledged){
			options.put(DHCPOption.DHCPMESSAGETYPE, new byte[] {DHCPMessageType.DHCPACK.getByte()});
		} else {
			options.put(DHCPOption.DHCPMESSAGETYPE, new byte[] {DHCPMessageType.DHCPNAK.getByte()});
		}
		options.put(DHCPOption.IPADDRESSLEASETIME, t);
		options.put(DHCPOption.SERVERIDENTIFIER, serverIp);
		// EXTRA:
		// 
		// DHCP option 1: 255.255.255.0 subnet mask
		// DHCP option 3: 192.168.1.1 router
		// DHCP option 6: DNS servers 9.7.10.15, 9.7.10.16, 9.7.10.18			(see Wikipedia)
		return options;
	}
	
	@Override
	public String getClassName() {
		if (options.get(DHCPOption.DHCPMESSAGETYPE)[0] == DHCPMessageType.DHCPACK.getByte()){
			return "DHCPACK";
		} else {
			return "DHCPNAK";
		}
	}
	
}