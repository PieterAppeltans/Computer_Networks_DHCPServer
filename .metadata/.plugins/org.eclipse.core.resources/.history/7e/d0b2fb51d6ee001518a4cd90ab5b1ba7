import java.net.InetAddress;
import java.net.NetworkInterface;
import java.nio.ByteBuffer;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.util.Random;

public class DHCPClient {
	
	public DHCPClient(InetAddress DHCPServerAdrress,int port){
		udpclient = new UDPClient(DHCPServerAdrress,port);
		state = DHCPClientState.INIT;
		chaddr = getChaddr();
	}
	
	private UDPClient udpclient;
	/**
	 * Storing a the current state of this DHCPClient conform the states specified in RF2311
	 */
	private DHCPClientState state;
	/**
	 * 
	 */
	private byte[] serverIdentifier;
	/**
	 * Storing the offered address 
	 */
	private byte[] offeredAddress;
	/**
	 * Storing the received address.
	 */
	private byte[] receivedAddress;
	/**
	 * Storing the unique transaction identifier used by the last transsaction
	 */
	private int xid;
	/**
	 * Storing the time at which the client must tries to extend its lease (cfr. RENEWING STATE)
	 */
	private LocalDateTime renewalTime;
	/**
	 * Storing the time at which the client must tries to extend its lease, but instead of unicasting the
	 * request message to its last known server, it must broadcast it.
	 */
	private LocalDateTime rebindingTime;
	/**
	 * Storing the time at which the clients lease ends
	 */
	private LocalDateTime leaseTime;
	
	public void init() {
		int timeout = 0; 
		Random rand = new Random();
		while (state == DHCPClientState.INIT){
			if (timeout != 0){				
				try{
					Thread.sleep(timeout*1000+(long) (rand.nextFloat()*2000-1000)); // why random fluctuation (+- 1s) ?
				}
				catch(Exception e){
					
				}
			}
			else{
				try {
					Thread.sleep((long)(rand.nextFloat()*9000+1000)); //  The client SHOULD wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.
				} catch (InterruptedException e) {
					e.printStackTrace();
				} 
			}
			this.xid = rand.nextInt();
			DHCPMessage message = new DHCPDiscover(xid,this.chaddr,DHCPDiscover.getDefaultOptions());
			message.print(true);
			byte[] returnMessage = null;
			try{
				udpclient.send(message.generateMessage());
				returnMessage = udpclient.receive();
				this.state = DHCPClientState.SELECTING;
			}	
			catch (Exception e){
			}
			
			if (returnMessage != null){
				DHCPMessage parsedMessage = MessageParser.parseMessage(returnMessage,312); // optionlength unknown?
				parsedMessage.print(false);
				Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
				byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
				if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPOFFER 
						&& parsedMessage.getXid() == this.xid ){
					this.serverIdentifier = parsedMessage.getSiaddr();
					this.offeredAddress = parsedMessage.getYiaddr();
					this.state = DHCPClientState.REQUESTING;
					System.out.println("TO REQUESTING STATE");	
				}
				else{
					if (timeout == 0){
						timeout = 4; // delay before the first retransmission SHOULD be 4 seconds
					}
					else{
						timeout = Math.min(timeout*2, 64); // The retransmission delay SHOULD be doubled with subsequent retransmissions up to a maximum of 64 seconds
					}
				}
			}
			else{
				
				if (timeout == 0){
					timeout = 4; // delay before the first retransmission SHOULD be 4 seconds
				}
				else{
					timeout = Math.min(timeout*2, 64); // The retransmission delay SHOULD be doubled with subsequent retransmissions up to a maximum of 64 seconds
				}
				ErrorPrinter.print("Socket Timed Out, waiting " + timeout + " seconds before retrying.");
			}
			
		}
	}
	private int tt = 0;
	public void select(){
		LocalDateTime endSelectTime = LocalDateTime.now().plusSeconds(10);
		DHCPMessage bestOffer = null;
		long bestLeaseTime= 0;
		while (LocalDateTime.now().isBefore(endSelectTime)){
			byte[] returnMessage = udpclient.receive();
			System.out.println("message received.");
			if (returnMessage != null){
				DHCPMessage parsedMessage = MessageParser.parseMessage(returnMessage,312); // optionlength unknown?
				parsedMessage.print(false);
				Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
				byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
				if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPOFFER 
					&& parsedMessage.getXid() == this.xid ){
					long leaseTime = toUnsigned(ByteBuffer.wrap(parsedOptions.get(DHCPOption.IPADDRESSLEASETIME)).getInt());
					if (leaseTime>=bestLeaseTime){
						bestOffer = parsedMessage;
						bestLeaseTime = leaseTime;
					}
				}
			}
		}
		if (bestOffer != null){
			this.serverIdentifier = bestOffer.getSiaddr();
			this.offeredAddress = bestOffer.getYiaddr();
			this.state = DHCPClientState.REQUESTING;
			System.out.println("TO REQUESTING STATE");
			this.tt = 0;
		}
		else {
				if (this.tt == 0){
					this.tt = 4; // delay before the first retransmission SHOULD be 4 seconds
				}
				else{
					this.tt = Math.min(this.tt*2, 64); // The retransmission delay SHOULD be doubled with subsequent retransmissions up to a maximum of 64 seconds
				}
				this.state = DHCPClientState.INIT;
				ErrorPrinter.print("Socket Timed Out, waiting " + this.tt + " seconds before retrying.");
			}
		
		
	}
	public void request(){
		int timeout = 0; 
		Random rand = new Random();
		while (this.state == DHCPClientState.REQUESTING){
			if (timeout != 0){				
				try{
				Thread.sleep(timeout*1000+(long) (rand.nextFloat()*2000-1000));
				}
				catch(Exception e){}
			}
			DHCPMessage message = new DHCPRequest(this.xid,new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 },this.chaddr,DHCPRequest.getDefaultOptions(this.offeredAddress,this.serverIdentifier,20));
			message.print(true);
			byte[] returnMessage = null;
			LocalDateTime startTime = LocalDateTime.now();
			try{
				udpclient.send(message.generateMessage());
				returnMessage = udpclient.receive();
			}	
			catch (Exception e){
			}
			if (returnMessage != null){
				DHCPMessage parsedMessage = MessageParser.parseMessage(returnMessage,312); // optionlength unknown?
				parsedMessage.print(false);
				Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
				byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
				if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPACK
						&& parsedMessage.getXid() == this.xid ){
					byte[] t3 = parsedOptions.get(DHCPOption.IPADDRESSLEASETIME);
					ByteBuffer buf3 = ByteBuffer.wrap(t3);
					long deltat = toUnsigned(buf3.getInt());
					this.leaseTime = startTime.plusSeconds(deltat);
					byte[] t1= parsedOptions.get(DHCPOption.RENEWALTIME);
					if (t1 == null){
						//this.renewalTime = startTime.plusSeconds(20);
						this.renewalTime = startTime.plusSeconds((long)(0.5*deltat));
					}
					else{
						ByteBuffer buf1 = ByteBuffer.wrap(t1);
						this.renewalTime = startTime.plusSeconds(toUnsigned(buf1.getInt()));
					}
					
					byte[] t2 = parsedOptions.get(DHCPOption.REBINDINGTIME);
					if (t2==null){
						this.rebindingTime = startTime.plusSeconds((long)(0.875*deltat));
					}
					else{
						ByteBuffer buf2 = ByteBuffer.wrap(t2);
						this.rebindingTime = startTime.plusSeconds(toUnsigned(buf2.getInt()));
					}
					this.state = DHCPClientState.BOUND;
					this.receivedAddress = parsedMessage.getYiaddr();
					System.out.println("TO BOUND STATE");
				}
				else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPNAK
						&& parsedMessage.getXid() == this.xid ){
					ErrorPrinter.print("Returning to INIT state due to DHCPNAK.");
					this.state = DHCPClientState.INIT;
				}
				else{ // if the client receives neither a DHCPACK or a DHCPNAK message.  The client retransmits the DHCPREQUEST
					if (timeout == 0){
						timeout = 4;
					}
					else if (timeout >= 64){
						/*If the client
					     receives neither a DHCPACK or a DHCPNAK message after employing the
					     retransmission algorithm, the client reverts to INIT state and
					     restarts the initialization process.*/
						this.state = DHCPClientState.INIT;   
						// The client SHOULD notify the user that the initialization process has failed and is restarting.
						ErrorPrinter.print("Returning to INIT state due to not receiving an answer.");
					}
					else{
						timeout = timeout*2;
					}
				}
			}
			else{
				if (timeout == 0){
					timeout = 4;
				}
				else if (timeout >= 64){
					/*If the client
				     receives neither a DHCPACK or a DHCPNAK message after employing the
				     retransmission algorithm, the client reverts to INIT state and
				     restarts the initialization process.*/
					this.state = DHCPClientState.INIT;
					// The client SHOULD notify the user that the initialization process has failed and is restarting.
					ErrorPrinter.print("Returning to INIT state due to not receiving an answer.");
				}
				else{
					timeout = timeout*2;
				}
			}
		}
	}
	public void release(){
		if (this.state == DHCPClientState.BOUND){	
			DHCPMessage message = new DHCPRelease(this.xid,this.receivedAddress, DHCPClient.getChaddr(),DHCPRelease.getDefaultOptions());
			message.print(true);
			byte[] returnMessage = null;
			try{

				udpclient.send(message.generateMessage());
				returnMessage = udpclient.receive();// Does the server return anything at all?


			}	
			catch (Exception e){
			}
			if (returnMessage != null){
				DHCPMessage mess = MessageParser.parseMessage(returnMessage,312);
				mess.print(false);
			}
		}
	}
	
	public void renew(){
		int timeout = 0;
		System.out.println("TO RENEWING STATE");
		this.state = DHCPClientState.RENEWING;
		while (this.state == DHCPClientState.RENEWING){
			if (timeout != 0){				
				try{
					Thread.sleep(timeout*1000);
				}
				catch(Exception e){}
			}
			// This message will be unicast.
			DHCPMessage message = new DHCPRequest(this.xid,this.receivedAddress,this.chaddr,DHCPRequest.getDefaultOptions(null,null,22));
			message.print(true);
			byte[] returnMessage = null;
			LocalDateTime startTime = LocalDateTime.now();
			try{
				 udpclient.send(message.generateMessage());
				 returnMessage = udpclient.receive();
			}	
			catch (Exception e){
			}
			if (returnMessage != null){
				
				// The server may choose not to extend the lease (as a policy decision by
			    // the network administrator), but should return a DHCPACK message regardless. -> 0 when not extended?
				
				DHCPMessage parsedMessage = MessageParser.parseMessage(returnMessage,312); // optionlength unknown?
				parsedMessage.print(false);
				Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
				byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
				if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPACK
						&& parsedMessage.getXid() == this.xid ){
					byte[] t3 = parsedOptions.get(DHCPOption.IPADDRESSLEASETIME);
					ByteBuffer buf3 = ByteBuffer.wrap(t3);
					long deltat = toUnsigned(buf3.getInt());
					this.leaseTime = startTime.plusSeconds(deltat);
					byte[] t1= parsedOptions.get(DHCPOption.RENEWALTIME);
					if (t1 == null){
						System.out.println();
						this.renewalTime = startTime.plusSeconds((long) (0.5*deltat));
					}
					else{
						ByteBuffer buf1 = ByteBuffer.wrap(t1);
						this.renewalTime = startTime.plusSeconds(toUnsigned(buf1.getInt()));
					}
					byte[] t2 = parsedOptions.get(DHCPOption.REBINDINGTIME);
					if (t2 == null){
						this.renewalTime = startTime.plusSeconds((long) (0.875*deltat));
					}
					else{
						ByteBuffer buf2 = ByteBuffer.wrap(t2);
						this.rebindingTime = startTime.plusSeconds(toUnsigned(buf2.getInt()));
					}
					this.state = DHCPClientState.BOUND;
					System.out.println("TO BOUND STATE");
				}
			} else {
				// If the client receives no response to its DHCPREQUEST message, the client SHOULD wait one-half
				// of the remaining time until T2 (in RENEWING state), down to a minimum of
				// 60 seconds, before retransmitting the DHCPREQUEST message.
				timeout = Math.max( 60, (int) (0.5*LocalDateTime.now().until(this.rebindingTime, ChronoUnit.SECONDS)) );
				// If no DHCPACK arrives before time T2, the client moves to REBINDING
				// state and sends (via broadcast) a DHCPREQUEST message to extend its
				// lease.
				if (this.rebindingTime.isBefore(LocalDateTime.now())){
					this.rebind();
				}
			}
		}
	}
	
	public void rebind(){
		int timeout = 0;
		System.out.println("TO REBINDING STATE");
		this.state = DHCPClientState.REBINDING;
		while (this.state == DHCPClientState.REBINDING){
			if (timeout != 0){				
				try{
					Thread.sleep(timeout*1000);
				}
				catch(Exception e){}
			}
			// This message MUST be broadcast to the 0xffffffff IP broadcast address.
			DHCPMessage message = new DHCPRequest(this.xid,this.receivedAddress,this.chaddr,DHCPRequest.getDefaultOptions());
			message.print(true);
			byte[] returnMessage = null;
			LocalDateTime startTime = LocalDateTime.now();
			try{
				udpclient.send(message.generateMessage());
				returnMessage = udpclient.receive();
			}	
			catch (Exception e){
			}
			if (returnMessage != null){			
				DHCPMessage parsedMessage = MessageParser.parseMessage(returnMessage,312); // optionlength unknown?
				parsedMessage.print(false);
				Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
				byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
				if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPACK
						&& parsedMessage.getXid() == this.xid ){
					byte[] t3 = parsedOptions.get(DHCPOption.IPADDRESSLEASETIME);
					ByteBuffer buf3 = ByteBuffer.wrap(t3);
					long deltat = toUnsigned(buf3.getInt());
					this.leaseTime = startTime.plusSeconds(deltat);
					byte[] t1= parsedOptions.get(DHCPOption.RENEWALTIME);
					if (t1 == null){
						this.renewalTime = startTime.plusSeconds((long)(0.5*deltat));
					}
					else {
						ByteBuffer buf1 = ByteBuffer.wrap(t1);
						this.renewalTime = startTime.plusSeconds(toUnsigned(buf1.getInt()));
					}
					byte[] t2 = parsedOptions.get(DHCPOption.REBINDINGTIME);
					if (t2 == null){
						this.rebindingTime = startTime.plusSeconds((long)(0.875*deltat));
					}
					else{
						ByteBuffer buf2 = ByteBuffer.wrap(t2);
						this.rebindingTime = startTime.plusSeconds(toUnsigned(buf2.getInt()));
					}
					this.state = DHCPClientState.BOUND;
					System.out.println("TO BOUND STATE");
				}
			} else {
				// If the client receives no response to its DHCPREQUEST message, the client SHOULD wait one-half of
				// the remaining lease time (in REBINDING state), down to a minimum of
				// 60 seconds, before retransmitting the DHCPREQUEST message.
				timeout = Math.max( 60, (int) (0.5*LocalDateTime.now().until(this.leaseTime, ChronoUnit.SECONDS)) );
				// If the lease expires before the client receives a DHCPACK, the client
				// moves to INIT state.
				if (this.leaseTime.isBefore(LocalDateTime.now())){
					this.state = DHCPClientState.INIT;
					System.out.println("TO INIT STATE");
				}
			}
		}
	}
	
	/**
	 * Method that converts a signed int to an unsigned long
	 * eg -1 = 0xffffffff => 2**32-1 
	 * @param signed The signed integer to be converted
	 * @return The unsigned long from which the 4 least significant bytes equals the 4 bytes of the signed int. 
	 */
	private long toUnsigned(int signed){
		return (long)(signed) &0x00000000ffffffffL;
	}
	
	public void run(){
		while (true){
			if (this.state == DHCPClientState.INIT){ // already gets checked within init()?
				this.init();
				this.select();
			} 
			else if (this.state == DHCPClientState.REQUESTING){
			
				this.request();
			}
			else {
				//System.out.println("Renal Time: " + this.renewalTime.toString());
				if (this.renewalTime.isBefore(LocalDateTime.now())){
					System.out.println("Now: "+ LocalDateTime.now());
					this.renew();
					//this.release();
				}		
			}
		}
	}
	
	/**
	 * Variable storing the hardware address of this client
	 */
	private byte [] chaddr;
	
	/**
	 * A method that gets the hardware address of this client. If this is not available eg. due to no rights a
	 * random MAC-address is generated.
	 * @return A MAC-address if possible the one of the client PC else a random MAC like address.
	 */
	public static byte[] getChaddr(){
		try{
			InetAddress ip = InetAddress.getLocalHost();
			NetworkInterface network = NetworkInterface.getByInetAddress(ip);
			byte[] mac = network.getHardwareAddress();
			byte[] chaddr = new byte[16];
			byte[] empty = new byte[] { (byte) 0x00, (byte) 0x00,
				 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
			System.arraycopy(mac, 0, chaddr, 0, 6);
			System.arraycopy(empty, 0, chaddr, 6, 10);
			return chaddr;
		}
		// If it's not possible to get the MAC a random one is generated.
		catch (Exception e){
			Random rand = new Random();
			byte[] mac = new byte[6]; // random fixed mac address
			rand.nextBytes(mac);
			byte[] chaddr = new byte[16];
			byte[] empty = new byte[] { (byte) 0x00, (byte) 0x00,
				 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				 (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
			System.arraycopy(mac, 0, chaddr, 0, 6);
			System.arraycopy(empty, 0, chaddr, 6, 10);
			return chaddr;
		}
	}
	
}
