import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.Map;

public class DHCPServerThread implements Runnable {

	private DatagramSocket serverSocket;
    private DatagramPacket receivePacket;
    private IPAddressKeeper addressKeeper;
    private byte[] serverAddress;
    public DHCPServerThread(DatagramSocket socket, DatagramPacket packet,IPAddressKeeper addresskeeper,byte[] serverAddress) {
        this.serverSocket = socket;
        this.receivePacket = packet;
        this.addressKeeper = addresskeeper;
        this.serverAddress = serverAddress;
    }

    public void run() {
    	System.out.println(Thread.currentThread().getName() + " started");
    	InetAddress IPAddress = receivePacket.getAddress(); 
		int port = receivePacket.getPort();
		byte[] sendData = this.answerMessage(receivePacket.getData());
		DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
		try {
			serverSocket.send(sendPacket);
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    /**
	 * Returning a DHCPOffer given the received DHCPDiscoverMessage.
	 * @param message the received DHCPDiscoverMessage that is used to make the offer
	 * @return
     * 
	 */
	private DHCPOffer processDiscover(DHCPMessage message) {
		Map<DHCPOption,byte[]>options = message.getOptionsMap();
		byte[] IP = options.get(DHCPOption.REQUESTEDIPADDRESS);
		byte[] t = options.get(DHCPOption.IPADDRESSLEASETIME);
		long leaseTime;
		if ((IP == null) || !(addressKeeper.inRange(IP) && !addressKeeper.inUse(IP)) ){
			IP = addressKeeper.generateNewInetAddress(message.getChaddr()).getAddress();
		}
		if (t == null){
			leaseTime = addressKeeper.getDefaultLeaseTime();
		}
		else{
			ByteBuffer buf = ByteBuffer.wrap(t);
			leaseTime = toUnsigned(buf.getInt());
			if (leaseTime < addressKeeper.getMinLeaseTime()){
				leaseTime = addressKeeper.getMinLeaseTime();
			}
			else if (leaseTime > addressKeeper.getMaxLeaseTime()){
				leaseTime = addressKeeper.getMaxLeaseTime();
			}
		}
		addressKeeper.addNewOffer(IP, message.getChaddr());
		return new DHCPOffer(message.getXid(), IP, this.serverAddress,message.getChaddr() , DHCPOffer.getDefaultOptions((int)leaseTime, this.serverAddress));
	}
	/**
	 * Method that converts a signed int to an unsigned long
	 * eg -1 = 0xffffffff => 2**32-1 
	 * @param signed The signed integer to be converted
	 * @return The unsigned long from which the 4 least significant bytes equals the 4 bytes of the signed int. 
	 */
	private long toUnsigned(int signed){
		return (long)(signed) &0x00000000ffffffffL;
	}
	/**
	 * 
	 * @param message
	 * @return
	 */
	private DHCPAck processRequest(DHCPMessage message){
		Map<DHCPOption,byte[]>options = message.getOptionsMap();
		byte[] IP = options.get(DHCPOption.REQUESTEDIPADDRESS);
		byte[] t = options.get(DHCPOption.IPADDRESSLEASETIME);
		// If the user has selected another DHCPServer
		if (message.getSiaddr() != null && message.getSiaddr() != this.serverAddress){
			addressKeeper.removeOfferByClientIdentifier(message.getChaddr());
		}
		//If the user select this DHCPServer the lease must be added
		// If successfull return ACK else NAK
		else if (message.getSiaddr() != null && message.getSiaddr() == this.serverAddress && IP != null){
			addressKeeper.addNewLease(IP, clientIdentifier, );
		}
		/*
		 * DHCPREQUEST generated during RENEWING state:

      'server identifier' MUST NOT be filled in, 'requested IP address'
      option MUST NOT be filled in, 'ciaddr' MUST be filled in with
      client's IP address. In this situation, the client is completely
      configured, and is trying to extend its lease. This message will
      be unicast, so no relay agents will be involved in its
      transmission.  Because 'giaddr' is therefore not filled in, the
      DHCP server will trust the value in 'ciaddr', and use it when
      replying to the client.
		 */
		else if (message.getSiaddr() == null && IP == null && message.getCiaddr() != null){}
		return null;
	}
	private void processRelease(DHCPMessage message){
		// check if client has IP and then release it.
		if (addressKeeper.hasIP(message.getChaddr(), message.getCiaddr())){
			addressKeeper.removeLease(message.getCiaddr());
		}
	}
	/**
	 * 
	 * @return
	 */
	public byte[] answerMessage(byte[] receivedMessage){
		addressKeeper.removeExpiredLeases();
		DHCPMessage parsedMessage = MessageParser.parseMessage(receivedMessage, 312);
		Map<DHCPOption, byte[]> parsedOptions = parsedMessage.getOptionsMap();
		byte[] messageType = parsedOptions.get(DHCPOption.DHCPMESSAGETYPE);
		if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPDISCOVER ){
			return processDiscover(parsedMessage).generateMessage();
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPREQUEST ){
			return processRequest(parsedMessage).generateMessage();
		}
		else if (DHCPbidirectionalMap.MessageTypeMap.getBackward(messageType[0]) == DHCPMessageType.DHCPRELEASE ){
			processRelease(parsedMessage);
			return null;
		}
		else{
			return null;
		}
	}
}